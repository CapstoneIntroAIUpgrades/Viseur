<%
from textwrap import TextWrapper
import operator

if not 'vis' in shared:
    shared['vis'] = {}


    def vis_type(type_obj, nullable=None, use_game_object_states=True):
        base_type = type_obj['name']

        if 'literals' in type_obj and type_obj['literals']:
            literals = list(type_obj['literals'])
            if base_type == 'string':
                literals = [ '"{}"'.format(lit) for lit in literals ]
            return ' | '.join(literals)

        if base_type == "dictionary":
            return "{ [id: " + vis_type(type_obj['keyType']) + "]: " + vis_type(type_obj['valueType']) + " }"
        elif base_type == "list":
            ret = vis_type(type_obj['valueType'], False)
            if ' ' in ret:
                ret = '(' + ret + ')'
            return ret + "[]"
        elif base_type == "int" or base_type == "float":
            return "number"
        elif type_obj['is_game_object']:
            if use_game_object_states:
                ret = base_type + 'State'
            else:
                ret = base_type
            if nullable is not None:
                if nullable and type_obj['nullable']:
                    ret += " | undefined"
            return ret
        else: # string, boolean
            return base_type
    shared['vis']['type'] = vis_type


    def js_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return str(default).lower()
        elif base_type == "int" or base_type == "float":
            return str(default)
        else:
            return "undefined"
    shared['vis']['value'] = js_value

    def vis_properties(obj):
        attrs = dict(obj['attributes'], **obj['inheritedAttributes']) # merge the two attributes

        properties = []
        for attr_name in sort_dict_keys(attrs):
            attr = attrs[attr_name]
            properties.append({
                'name': attr_name,
                'type': vis_type(attr['type']),
                'description': attr["description"]
            })
        return properties
    shared['vis']['properties'] = vis_properties

    def vis_block_comment(prefix, doc):
        wrapper = TextWrapper(
            initial_indent=prefix+' * ',
            subsequent_indent=prefix+' * ',
            width=80,
        )
        if isinstance(doc, str):
            doc = {'description': doc}
        description = doc['description']
        lines = wrapper.wrap(doc['description'])

        if 'arguments' in doc and doc['arguments']:
            for arg in doc['arguments']:
                lines += wrapper.wrap('@param ' + arg['name'] + ' ' + arg['description'])
        if 'returns' in doc and doc['returns']:
            lines += wrapper.wrap('@returns ' + doc['returns']['description'])

        lines.insert(0, prefix+'/**')
        lines.append(prefix+' */')
        return '\n'.join(lines)
    shared['vis']['block_comment'] = vis_block_comment

    def vis_imports(imports):
        pairs = sorted(imports.items(), key=operator.itemgetter(0))
        index = -1
        for i, item in enumerate(pairs):
            if item[0][0] != '.':
                index = i
                break
        if index > -1:
            p = pairs[index:] + pairs[:index]
            pairs = p

        doc = ''
        for pair in pairs:
            import_from = pair[0]
            import_names = sorted(pair[1])
            imports = ', '.join(import_names)
            if imports[0] != '*':
                imports = '{ ' + imports + ' }'
            one_line = 'import {} from "{}";'.format(imports, import_from)
            if len(one_line) <= 80:
                doc += one_line + '\n'
            else:
                doc += 'import {'
                for name in import_names:
                    doc += '\n    {},'.format(name)
                doc += '\n}} from "{}";\n'.format(import_from)
        return doc
    shared['vis']['imports'] = vis_imports

    def vis_function_top(func_name, func):
        docstring = shared['vis']['block_comment']('    ', func)
        dec_start = '    public {}('.format(func_name)
        dec_end = '): void {'
        strs = ['{}: {}'.format(parm['name'], shared['vis']['type'](parm['type'])) for parm in func['arguments']]
        dec_line = dec_start + ', '.join(strs) + dec_end
        if len(dec_line) >= 80:
            dec_line = dec_start + ''.join(['\n        {},'.format(s) for s in strs]) + '\n    ' + dec_end
        return docstring + '\n' + dec_line
    shared['vis']['function_top'] = vis_function_top

    shared['vis']['TextWrapper'] = TextWrapper
%>