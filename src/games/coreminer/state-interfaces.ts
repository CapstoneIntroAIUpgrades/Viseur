// These are the interfaces for all the states in this game
import { IBaseGame, IBaseGameObject, IBasePlayer, IFinishedDelta, IRanDelta } from "@cadre/ts-utils/cadre";
import { GameObjectInstance, GameSpecificDelta } from "src/viseur/game/base-delta";

// This is a file generated by Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

// -- Game State Interfaces -- \\
/**
 * Mine resources to obtain more value than your opponent.
 */
export interface IGameState extends IBaseGame {
    /**
     * The monetary price of a bomb when bought or sold.
     */
    bombPrice: number;

    /**
     * The amount of cargo space taken up by a bomb.
     */
    bombSize: number;

    /**
     * The monetary price of building materials when bought.
     */
    buildingMaterialPrice: number;

    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    currentTurn: number;

    /**
     * The monetary price of dirt when bought or sold.
     */
    dirtPrice: number;

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    gameObjects: {[id: string]: IGameObjectState};

    /**
     * A list of all jobs.
     */
    jobs: IJobState[];

    /**
     * The amount of building material required to build a ladder.
     */
    ladderCost: number;

    /**
     * The number of Tiles in the map along the y (vertical) axis.
     */
    mapHeight: number;

    /**
     * The number of Tiles in the map along the x (horizontal) axis.
     */
    mapWidth: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    maxTurns: number;

    /**
     * The amount of money awarded when ore is dumped in the base and sold.
     */
    orePrice: number;

    /**
     * The amount of victory points awarded when ore is dumped in the base and
     * sold.
     */
    oreValue: number;

    /**
     * List of all the players in the game.
     */
    players: IPlayerState[];

    /**
     * A unique identifier for the game instance that is being played.
     */
    session: string;

    /**
     * The amount of building material required to shield a Tile.
     */
    shieldCost: number;

    /**
     * The monetary price of spawning a Miner.
     */
    spawnPrice: number;

    /**
     * The amount of building material required to build a support.
     */
    supportCost: number;

    /**
     * All the tiles in the map, stored in Row-major order. Use `x + y *
     * mapWidth` to access the correct index.
     */
    tiles: ITileState[];

    /**
     * The amount of time (in nano-seconds) added after each player performs a
     * turn.
     */
    timeAddedPerTurn: number;

    /**
     * Every Unit in the game.
     */
    units: IUnitState[];

    /**
     * The cost to upgrade a Unit.
     */
    upgradePrice: number;

    /**
     * The amount of victory points required to win.
     */
    victoryAmount: number;

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObject {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    logs: string[];

}

/**
 * Information about a Unit's job.
 */
export interface IJobState extends IGameObjectState {
    /**
     * The amount of cargo capacity this Unit starts with per level.
     */
    cargoCapacity: number[];

    /**
     * The amount of starting health this Job has per level.
     */
    health: number[];

    /**
     * The amount of mining power this Unit has per turn per level.
     */
    miningPower: number[];

    /**
     * The number of moves this Job can make per turn per level.
     */
    moves: number[];

    /**
     * The Job title. 'miner' or 'bomb'.
     */
    title: "miner" | "bomb";

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayer {
    /**
     * The Tile this Player's base is on.
     */
    baseTile: ITileState;

    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    clientType: string;

    /**
     * The Tiles this Player's hoppers are on.
     */
    hopperTiles: ITileState[];

    /**
     * If the player lost the game or not.
     */
    lost: boolean;

    /**
     * The amount of money this Player currently has.
     */
    money: number;

    /**
     * The name of the player.
     */
    name: string;

    /**
     * This player's opponent in the game.
     */
    opponent: IPlayerState;

    /**
     * The reason why the player lost the game.
     */
    reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    reasonWon: string;

    /**
     * The Tiles on this Player's side of the map.
     */
    side: ITileState[];

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    timeRemaining: number;

    /**
     * Every Unit owned by this Player.
     */
    units: IUnitState[];

    /**
     * The amount of value (victory points) this Player has gained.
     */
    value: number;

    /**
     * If the player won the game or not.
     */
    won: boolean;

}

/**
 * A Tile in the game that makes up the 2D map grid.
 */
export interface ITileState extends IGameObjectState {
    /**
     * The amount of dirt on this Tile.
     */
    dirt: number;

    /**
     * Whether or not the tile is a base Tile.
     */
    isBase: boolean;

    /**
     * Whether or not this tile is about to fall.
     */
    isFalling: boolean;

    /**
     * Whether or not a hopper is on this Tile.
     */
    isHopper: boolean;

    /**
     * Whether or not a ladder is built on this Tile.
     */
    isLadder: boolean;

    /**
     * Whether or not a support is built on this Tile.
     */
    isSupport: boolean;

    /**
     * The amount of ore on this Tile.
     */
    ore: number;

    /**
     * The owner of this Tile, or undefined if owned by no-one.
     */
    owner: IPlayerState;

    /**
     * The amount of shielding on this Tile.
     */
    shielding: number;

    /**
     * The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the
     * map.
     */
    tileEast: ITileState;

    /**
     * The Tile to the 'North' of this one (x, y-1). Null if out of bounds of
     * the map.
     */
    tileNorth: ITileState;

    /**
     * The Tile to the 'South' of this one (x, y+1). Null if out of bounds of
     * the map.
     */
    tileSouth: ITileState;

    /**
     * The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the
     * map.
     */
    tileWest: ITileState;

    /**
     * An array of the Units on this Tile.
     */
    units: IUnitState[];

    /**
     * The x (horizontal) position of this Tile.
     */
    x: number;

    /**
     * The y (vertical) position of this Tile.
     */
    y: number;

}

/**
 * A unit in the game.
 */
export interface IUnitState extends IGameObjectState {
    /**
     * The number of bombs being carried by this Unit. (0 to job cargo capacity
     * - other carried materials).
     */
    bombs: number;

    /**
     * The number of building materials carried by this Unit. (0 to job cargo
     * capacity - other carried materials).
     */
    buildingMaterials: number;

    /**
     * The amount of dirt carried by this Unit. (0 to job cargo capacity - other
     * carried materials).
     */
    dirt: number;

    /**
     * The remaining health of a Unit.
     */
    health: number;

    /**
     * The Job this Unit has.
     */
    job: IJobState;

    /**
     * The maximum amount of cargo this Unit can carry.
     */
    maxCargoCapacity: number;

    /**
     * The maximum health of this Unit.
     */
    maxHealth: number;

    /**
     * The maximum mining power of this Unit.
     */
    maxMiningPower: number;

    /**
     * The maximum moves this Unit can have.
     */
    maxMoves: number;

    /**
     * The remaining mining power this Unit has this turn.
     */
    miningPower: number;

    /**
     * The number of moves this Unit has left this turn.
     */
    moves: number;

    /**
     * The amount of ore carried by this Unit. (0 to job capacity - other
     * carried materials).
     */
    ore: number;

    /**
     * The Player that owns and can control this Unit.
     */
    owner: IPlayerState;

    /**
     * The Tile this Unit is on.
     */
    tile: ITileState;

    /**
     * The upgrade level of this unit. Starts at 0.
     */
    upgradeLevel: number;

}

// -- Run Deltas -- \\
/**
 * The delta about what happened when a 'GameObject' ran their 'log' function.
 */
export type GameObjectLogRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IGameObjectState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "log";

            /**
             * The arguments to GameObject.log,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * A string to add to this GameObject's log. Intended for
                 * debugging.
                 */
                message: string;
            };
        };

        /**
         * This run delta does not return a value.
         */
        returned: void;
    };
};

/**
 * The delta about what happened when a 'Player' ran their 'spawnMiner'
 * function.
 */
export type PlayerSpawnMinerRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IPlayerState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "spawnMiner";

            /**
             * The arguments to Player.spawnMiner,
             * as a map of the argument name to its value.
             */
            args: {
            };
        };

        /**
         * True if successfully spawned, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'build' function.
 */
export type UnitBuildRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "build";

            /**
             * The arguments to Unit.build,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The Tile to build on.
                 */
                tile: GameObjectInstance<ITileState>;
                /**
                 * The structure to build (support, ladder, or shield).
                 */
                type: "support" | "ladder" | "shield";
            };
        };

        /**
         * True if successfully built, False otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'buy' function.
 */
export type UnitBuyRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "buy";

            /**
             * The arguments to Unit.buy,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The type of resource to buy.
                 */
                resource: "dirt" | "ore" | "bomb" | "buildingMaterials";
                /**
                 * The amount of resource to buy.
                 */
                amount: number;
            };
        };

        /**
         * True if successfully purchased, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'dump' function.
 */
export type UnitDumpRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "dump";

            /**
             * The arguments to Unit.dump,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The tile the materials will be dumped on.
                 */
                tile: GameObjectInstance<ITileState>;
                /**
                 * The material the Unit will drop. 'dirt', 'ore', or 'bomb'.
                 */
                material: "dirt" | "ore" | "bomb";
                /**
                 * The number of materials to drop. Amounts <= 0 will drop all
                 * the materials.
                 */
                amount: number;
            };
        };

        /**
         * True if successfully dumped materials, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'mine' function.
 */
export type UnitMineRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "mine";

            /**
             * The arguments to Unit.mine,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The Tile the materials will be mined from.
                 */
                tile: GameObjectInstance<ITileState>;
                /**
                 * The amount of material to mine up. Amounts <= 0 will mine all
                 * the materials that the Unit can.
                 */
                amount: number;
            };
        };

        /**
         * True if successfully mined, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'move' function.
 */
export type UnitMoveRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "move";

            /**
             * The arguments to Unit.move,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The Tile this Unit should move to.
                 */
                tile: GameObjectInstance<ITileState>;
            };
        };

        /**
         * True if it moved, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'transfer' function.
 */
export type UnitTransferRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "transfer";

            /**
             * The arguments to Unit.transfer,
             * as a map of the argument name to its value.
             */
            args: {
                /**
                 * The Unit to transfer materials to.
                 */
                unit: GameObjectInstance<IUnitState>;
                /**
                 * The type of resource to transfer.
                 */
                resource: "dirt" | "ore" | "bomb" | "buildingMaterials";
                /**
                 * The amount of resource to transfer.
                 */
                amount: number;
            };
        };

        /**
         * True if successfully transfered, false otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'Unit' ran their 'upgrade' function.
 */
export type UnitUpgradeRanDelta = IRanDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        run: {
            /** The reference to the game object requesting a function to be run. */
            caller: GameObjectInstance<IUnitState>; // tslint:disable-line:no-banned-terms

            /** The name of the function of the caller to run. */
            functionName: "upgrade";

            /**
             * The arguments to Unit.upgrade,
             * as a map of the argument name to its value.
             */
            args: {
            };
        };

        /**
         * True if successfully upgraded, False otherwise.
         */
        returned: boolean;
    };
};

/**
 * The delta about what happened when a 'AI' ran their 'runTurn' function.
 */
export type AIRunTurnFinishedDelta = IFinishedDelta & {
    /** Data about why the run/ran occurred. */
    data: {
        /** The player that requested this game logic be ran. */
        player: GameObjectInstance<IPlayerState>;

        /** The data about what was requested be run. */
        order: {

            /** The name of the function of the caller to run. */
            name: "runTurn";

            /**
             * The arguments to AI.runTurn,
             * as a positional array of arguments send to the AI.
             */
            args: {
            };
        };

        /**
         * Represents if you want to end your turn. True means end your turn,
         * False means to keep your turn going and re-call this function.
         */
        returned: boolean;
    };
};

/** All the possible specific deltas in Coreminer. */
export type CoreminerSpecificDelta =
    GameObjectLogRanDelta
    | PlayerSpawnMinerRanDelta
    | UnitBuildRanDelta
    | UnitBuyRanDelta
    | UnitDumpRanDelta
    | UnitMineRanDelta
    | UnitMoveRanDelta
    | UnitTransferRanDelta
    | UnitUpgradeRanDelta
    | AIRunTurnFinishedDelta
;

/** The possible delta objects in Coreminer. */
export type CoreminerDelta = GameSpecificDelta<CoreminerSpecificDelta>;
